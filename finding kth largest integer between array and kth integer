import heapq

def find_kth_largest(nums, k):
    # Create a min-heap with the first k elements
    min_heap = nums[:k]
    heapq.heapify(min_heap)

    # Process the rest of the elements
    for num in nums[k:]:
        if num > min_heap[0]:  # Only add if the current number is larger than the smallest in the heap
            heapq.heappop(min_heap)  # Remove the smallest
            heapq.heappush(min_heap, num)  # Add the current number

    # The root of the min-heap is the kth largest element
    return min_heap[0]

# Example usage
nums = [3, 2, 1, 5, 6, 3]
k = 2
result = find_kth_largest(nums, k)
print(result)  # Output: 5
