def max_length_subarray_with_sum(nums, target_sum):
    cumulative_sum = 0
    sum_indices = {}
    max_length = 0

    for index, num in enumerate(nums):
        cumulative_sum += num
        
        # Check if the cumulative sum equals the target sum
        if cumulative_sum == target_sum:
            max_length = index + 1  # From start to current index

        # Check if the cumulative_sum - target_sum exists in the hashmap
        if (cumulative_sum - target_sum) in sum_indices:
            # Calculate the length of the subarray
            length = index - sum_indices[cumulative_sum - target_sum]
            max_length = max(max_length, length)

        # Store the first occurrence of the cumulative sum
        if cumulative_sum not in sum_indices:
            sum_indices[cumulative_sum] = index

    return max_length

# Example usage
nums = [5, 6, -5, 5, 3, 5, 3, -2]
target_sum = 8
result = max_length_subarray_with_sum(nums, target_sum)
print(result)  # Output: Length of the longest subarray with sum 8
Explanation
